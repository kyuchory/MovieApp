{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRA4BeA,MAvBf,YAAuD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC1C,OACA,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SAA+BD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAkB,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QACrE,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAE,KAA/C,gBCoCGC,G,kNA1CbC,MAAQ,CACNC,WAAY,EACZC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAGyBC,IAAMC,IAAI,yDAHnC,gBAGQJ,EAHR,EAGJK,KAAMA,KAAML,OAElB,EAAKM,SAAS,CAACN,OAAOA,EAAQD,WAAW,IAL/B,2C,uDASZ,WAKEQ,KAAKN,c,oBAGP,WACE,MAA4BM,KAAKT,MAA1BC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,OAClB,OACE,aADM,CACN,WAASV,UAAU,YAAnB,SACCS,EACD,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGA,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAK,SAAAe,GAAK,OAClB,cAAC,EAAD,CAAsBC,GAAID,EAAMC,GAAIxB,KAAMuB,EAAMvB,KAAMC,MAAOsB,EAAMtB,MAAOC,QAASqB,EAAMrB,QAASC,OAAQoB,EAAME,mBAAoBrB,OAAQmB,EAAMnB,QAAtImB,EAAMC,e,GAlCVE,IAAMC,YCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.34889cbb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport App from \"./App\";\r\nimport \"./Movie.css\"\r\n\r\nfunction Movie({year, title, summary, poster, genres}){\r\n    return (\r\n    <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title}/>\r\n        <div className=\"movie__data\">\r\n            <h3 className=\"movie__title\">{title}</h3>\r\n            <h5 className=\"movie__year\">{year}</h5>\r\n            <ul className=\"movie__genres\">{genres.map((genre, index) => <li key={index} className=\"genres__genre\">{genre}</li>)}</ul>\r\n            <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport Movie from \"./Movie\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component{\r\n  state = { \r\n    isLoading : true,\r\n    movies: []\r\n  }\r\n\r\n  getMovies = async () =>{\r\n    //const movies = await axios.get(\"https://yts.mx/api/v2/list_movies.json\");\r\n    //axios는 get하는데 시간이 오래걸림. 따라서 async함수로 만들고 await키워드로 기다리게 해야한다.\r\n    const{data:{data:{movies}}} =await axios.get(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\");\r\n    //위의 표현은 movies.data.data.movies 를 여러번 안 쓰고 movies로만 쓰게 하기위한 ES6방식\r\n    this.setState({movies:movies, isLoading: false}); // 처음 무비는 setState, 두번째 무비는 axios에서 온거. ==> 그냥 movies하나만 써도 자바스크립트가 이해함\r\n\r\n  }\r\n\r\n  componentDidMount(){ //마운트되자마자 실행 되는 함수\r\n    // setTimeout(() => { // 몇초 뒤에 실행되는 함수.\r\n    //   this.setState({isLoading: false});\r\n    // }, 6000);\r\n    //이 방식보다 axios를 쓰는게 더 좋다.\r\n    this.getMovies();\r\n  }\r\n\r\n  render(){\r\n    const {isLoading, movies} = this.state;\r\n    return( // html 클래스를 적을때 여기선 자바스크립트기 때문에 클래스component와 겹침 따라서 className으로 적어야함.\r\n      <section className=\"container\">\r\n      {isLoading ? (\r\n      <div className=\"loader\">\r\n        <span className=\"loader__text\">Loading...</span>\r\n      </div>\r\n      ):( \r\n        <div className=\"movies\">\r\n          {movies.map( movie=>\r\n          <Movie key={movie.id} id={movie.id} year={movie.year} title={movie.title} summary={movie.summary} poster={movie.medium_cover_image} genres={movie.genres}/>\r\n      )}\r\n        </div>\r\n      )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//이런걸 function component라구 부름 클래스 컴포넌트도 있따. //첫번 째 실습\r\n// function App() {\r\n//   return ( //이 return은 html을 반환.\r\n//     <div>\r\n//       {foodILike.map(dish => <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating}/>)}\r\n//     </div>\r\n//     //리액트에서 배열 내의 객체를 전달할때 객체 고유 id(key)를 전달해야함. 그래서 객체에 id 달아주고 그걸 키로 전달해야 오류가 안남.\r\n//   );\r\n// }\r\n\r\n//이 아래는 연습했던거 아까워서 걍 주석처리해서 남겨둠\r\n// const foodILike = [\r\n//   {\r\n//     id:1,\r\n//     name:\"kimchi\",\r\n//     image:\"http://img.danawa.com/prod_img/500000/723/205/img/13205723_1.jpg?shrink=360:360&_v=20210430173652\",\r\n//     rating:5\r\n//   },\r\n//   {\r\n//     id:2,\r\n//     name:\"chobab\",\r\n//     image:\"https://rimage.gnst.jp/livejapan.com/public/article/detail/a/00/00/a0000881/img/basic/a0000881_main.jpg\",\r\n//     rating:4.5\r\n//   },\r\n//   {\r\n//     id:3,\r\n//     name:\"bulgogi\",\r\n//     image:\"https://recipe1.ezmember.co.kr/cache/recipe/2019/03/03/11baafbe81803965b17c3ab42a5992cb1.jpg\",\r\n//     rating:4.7\r\n//   },\r\n//   {\r\n//     id:4,\r\n//     name:\"guksu\",\r\n//     image:\"https://recipe1.ezmember.co.kr/cache/recipe/2015/10/14/434379c503e37e6964324965a79d3a101.jpg\",\r\n//     rating:3.9\r\n//   },\r\n//   {\r\n//     id:5,\r\n//     name:\"chicken\",\r\n//     image:\"http://economychosun.com/query/upload/303/20190608214338_gubchoja.jpg\",\r\n//     rating:4.1\r\n//   },\r\n//   //자바스크립트 배열의 객체들 정보 가져오는법\r\n// ]\r\n\r\n// function Food({name, picture, rating}){\r\n//   return(\r\n//     <div>\r\n//       <h1>i + love {name}</h1>\r\n//       <h4>{rating}/5.0</h4>\r\n//       <img src={picture} alt={name}/>\r\n//     </div>\r\n//     //이렇게 속성을 이용하는 방식 jsx\r\n//   )\r\n// }\r\n\r\n// Food.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   picture: PropTypes.string.isRequired,\r\n//   rating: PropTypes.number.isRequired\r\n//   //prop이 필수적으로 사용됐는지, string인지 등등 검사해줌.\r\n// }\r\n\r\n\r\n//class App extends React.Component{ //두번째 실습 \r\n  //function component와 다른점은 return을 안함. 함수가아니여서.\r\n  //React.Component를 상속받았기때문에 이미 render 메소드 가지고있음.\r\n  //react는 자동적으로 class component의 render method를 실행한다.\r\n  //class component만 state를 사용 할 수 있다. f.c 에선 xx\r\n\r\n  //클래스 component에서 마운팅, 업데이트, 언마운팅때 호출할 수 있는 함수, 그 함수의 호출 순서.\r\n  //component의 생명주기라고 이해하면 이해하기 편할것임.\r\n\r\n  //클래스 component가 마운팅 될때 함수 호출 순서(웹페이지에 리액트가 나타나는 순서)\r\n  //constructor() ==> render() ==> componentDidMount().\r\n\r\n  //업데이트 될때 호출되는 순서 (add, minus버튼 눌릴때 바뀌는 것같은 것)\r\n  //render() ==> componentDidUpdate() \r\n\r\n  //클래스 component가 언마운팅 될때 사용가능 함수(웹페이지 이동, 등등 웹 죽을때)\r\n  //componentWillUnmount()\r\n\r\n//   componentDidUpdate(){\r\n//     console.log(\"componentDidUpdate\");\r\n//   }\r\n\r\n//   componentWillUnmount(){\r\n//     console.log(\"i'm die !!!!!!!!\");\r\n//   }\r\n\r\n//   state={ //state안의 데이터는 바뀌는 값을 넣는다...\r\n//     count:0\r\n//   }\r\n\r\n//  add = () => {\r\n//    this.setState(current => ({count:current.count+1})); \r\n//    //setState --> state 객체의 새로운 값 세팅.\r\n//    //state를 set할때, react에서 외보의 상태에 의존하지 않는 가장 좋은 방식. 매개변수를 이용.\r\n//    //현재의 state값을 받아온다고 이해하면 될 것 같당.\r\n//   // 매 순간 setState를 호출할 때 마다 react는 새로운 state와 함께 render function을 호출 하는 것.\r\n//  }\r\n\r\n//  minus = () => {\r\n//     this.setState(current => ({count:current.count-1}));\r\n//   //this.setState({count:this.state.count-1});\r\n//   //별로 좋지 못한 방식.. 매개변수를 이용하라.\r\n// }\r\n\r\n// render(){\r\n//   console.log(\"rendering!!\");\r\n//     return (\r\n//     <div>\r\n//       <h1>The number is : {this.state.count}</h1>\r\n//       <button onClick={this.add}>Add</button>\r\n//       <button onClick={this.minus}>Minus</button>\r\n//     </div>\r\n//     //리액트의 버튼요소엔 onClick이라는 속성을 아예갖고있음\r\n//     //자바스크립이였으면 add머시기했어야함.\r\n//     )\r\n//   }\r\n// }","import { func } from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}